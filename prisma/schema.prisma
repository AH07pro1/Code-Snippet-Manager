// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model Snippet {
  id          String   @id @default(cuid())
  title       String
  content     String
  description String
  tags        String[]
  language    String
  icon        String   @default("/icons/other.svg")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  projectId   String?   
  project     Project?  @relation(fields: [projectId], references: [id])

  userId String?  
  user   User? @relation(fields: [userId], references: [id])
}


model User {
  id            String    @id @default(cuid())
  name          String?
  username      String?   @unique
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[] 
  sessions      Session[]

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  role          Role     @default(USER) 

  snippets      Snippet[]  // <-- Add this line (relation back to Snippet)
}

enum Role {
  USER
  ADMIN
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String  @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User?   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Project {
  id          String   @id @default(cuid())
  title       String
  description String
  content     String?
  tags        String[]
  icon        String   @default("/icons/project.svg")
 
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  snippets    Snippet[]

}